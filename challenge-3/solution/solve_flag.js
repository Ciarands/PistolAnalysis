// This array (closure var 7) is generated by the first major loop
const initial_ksa = [
  221, 42, 254, 242, 171, 3, 24, 151, 143, 96, 72, 186, 100, 99, 94, 65, 149,
  140, 87, 27, 182, 85, 18, 131, 39, 2, 38, 255, 16, 125, 9, 85, 28, 201, 212,
  22, 168, 17, 140, 108, 174, 57, 127, 34, 248, 248, 249, 256, 42, 44, 57, 136,
  97, 121, 9, 109, 196, 205, 3, 77, 8, 109, 202, 247, 4, 89, 86, 69, 225, 134,
  103, 175, 94, 123, 41, 64, 203, 10, 138, 136, 125, 60, 185, 165, 46, 104, 196,
  235, 213, 82, 68, 242, 2, 105, 210, 70, 2, 109, 238, 242, 10, 161, 40, 86,
  106, 227, 183, 177, 142, 190, 222, 158, 32, 48, 145, 214, 115, 36, 77, 67, 8,
  169, 108, 0, 124, 98, 200, 42, 123, 96, 192, 255, 120, 82, 112, 36, 95, 193,
  11, 205, 85, 137, 193, 16, 240, 43, 147, 1, 154, 45, 163, 101, 244, 75, 90,
  181, 214, 156, 66, 41, 149, 27, 67, 51, 213, 158, 86, 169, 154, 65, 46, 190,
  27, 78, 128, 172, 180, 229, 10, 239, 72, 99, 5, 213, 177, 219, 215, 192, 55,
  5, 220, 226, 6, 229, 26, 94, 246, 131, 213, 192, 67, 89, 222, 250, 162, 149,
  72, 125, 187, 46, 229, 43, 213, 206, 165, 177, 250, 175, 240, 117, 151, 99,
  45, 236, 98, 42, 221, 11, 37, 194, 109, 114, 145, 75, 170, 227, 56, 59, 78,
  193, 113, 148, 102, 84, 234, 107, 117, 178, 31, 178, 33, 192, 119, 196, 145,
  97,
];

const KSA2 = new Array(256);
const unconfident_array = new Array(256).fill(false);
let fallback_counter = 0;

for (let i = 0; i < 256; i++) {
  const value_from_ksa = initial_ksa[i];
  if (!unconfident_array[value_from_ksa]) {
    KSA2[i] = value_from_ksa;
    unconfident_array[value_from_ksa] = true;
  } else {
    while (unconfident_array[fallback_counter]) {
      fallback_counter++;
    }
    KSA2[i] = fallback_counter;
    unconfident_array[fallback_counter] = true;
  }
}

// The target ciphertext array (closure var 23)
const target_data = [
  85, 39, 30, 68, 77, 34, 203, 235, 240, 137, 195, 215, 230, 71, 201, 110, 203,
  226, 129, 216,
];
// correct array
// [85,39,30,68,77,34,203,232,240,137,195,215,230,71,201,110,203,226,129,216]

// The initial state (closure var 21)
const initial_state = 83;

let flag = "";
let state = initial_state;
target_data.map((keystream_byte, i) => {
  const j = KSA2.indexOf(keystream_byte);

  // Original: j = state ^ i ^ charCode
  // Reversed: charCode = state ^ i ^ j
  const charCode = state ^ i ^ j;
  flag += String.fromCharCode(charCode);
  state = keystream_byte;
})

console.log("Recovered Flag:", flag);